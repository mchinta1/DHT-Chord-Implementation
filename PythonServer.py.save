#!/usr/bin/env python

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#

import glob
import sys
import socket
import hashlib
sys.path.append('gen-py')
sys.path.insert(0, glob.glob('/home/yaoliu/src_code/local/lib/lib/python2.7/site-packages')[0])

from chord import FileStore
from chord.ttypes import SystemException,RFileMetadata, RFile, NodeID

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

class FileStoreHandler:
	def __init__(self,port):
		print("Intialized")
		self.file_lookup = {}
		self.finger_table= []
		hostname = socket.gethostname()
		IP = socket.gethostbyname(hostname)
		self.NodeID = NodeID()
		self.NodeID.ip = IP
		self.NodeID.port = port
		sha256 = hashlib.sha256()
		sha256.update(IP+':'+port)
		#id = hashlib.sha256(IP+':'+port)
		#self.NodeID.id = id.hexdigest()
		self.NodeID.id = sha256.hexdigest()
		print(self.NodeID)
	def writeFile(self,rFile):
        	print("In Write File - ",rFile)
		if rFile.meta.filename in self.file_lookup:
			f = self.file_lookup[rFile]
			f.content = rFile.content
			f.meta.version += 1
		else:
			self.file_lookup[rFile.meta.filename] = rFile
			f = self.file_lookup[rFile.meta.filename]
			f.meta.verion = 0
	def readFile(self, filename,owner):
		print('Filename & owner - ',filename,owner)
		x = RFile()
		x.meta = RFileMetadata()
		x.meta.filename = filename
		x.meta.owner = owner
		if filename in self.file_lookup:
			return self.file_lookup[filename]
		return x
	def setFingertable(self, node_list):
        	#print('Node List',node_list)
		self.finger_table = node_list
		#print(len(self.finger_table))
		for x in node_list:
			if x.id == self.NodeID.id:
				print x
	def findSucc(self,key):
        	print('find succ-',key)
        	x = NodeID()
        	return x
	def findPred(self,key):
        	print('find pred-',key)
        	x = NodeID()
	        return x
	def getNodeSucc(self):
        	print('get node succ')
        	return self.finger_table[0]
	def 

if __name__ == '__main__':
    handler = FileStoreHandler(sys.argv[1])
    processor = FileStore.Processor(handler)
    #port = sys.argv[1]
    transport = TSocket.TServerSocket(port = sys.argv[1])
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    # You could do one of these for a multithreaded server
    # server = TServer.TThreadedServer(
    #     processor, transport, tfactory, pfactory)
    # server = TServer.TThreadPoolServer(
    #     processor, transport, tfactory, pfactory)

    print('Starting the server on port...{0}'.format(sys.argv[1]))
    server.serve()
    print('done.')
